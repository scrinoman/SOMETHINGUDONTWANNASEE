#pragma once
#include "stdafx.h"
#include "TokenType.h"

static std::map<TokenType, std::string> tokenStringName = {
	/*{ TokenType::WIDE_CHAR, "WIDE_CHAR" },
	{ TokenType::T_CHAR, "T_CHAR" },
	{ TokenType::AUTO, "AUTO"},
	{ TokenType::BREAK, "BREAK"},
	{ TokenType::CASE, "CASE"},*/
	{ TokenType::CHAR, "CHAR" },
	{ TokenType::CIN, "CIN" },
	{ TokenType::COUT, "COUT" },
	{ TokenType::MAP, "MAP" },
	{ TokenType::STR, "STRING" },
	/*{ TokenType::CONST, "CONST" },
	{ TokenType::CONTINUE, "CONTINUE" },
	{ TokenType::DEFAULT, "DEFAULT" },
	{ TokenType::DECLTYPE, "DECLTYPE" },
	{ TokenType::DO, "DO" },
	{ TokenType::DOUBLE, "DOUBLE"},*/
	{ TokenType::ELSE, "ELSE" },
	/*{ TokenType::ENUM, "ENUM" },
	{ TokenType::EXTERN, "EXTERN" },
	{ TokenType::FALSE, "FALSE" },*/
	{ TokenType::FLOAT, "FLOAT" },
	{ TokenType::FOR, "FOR" },
	/*{ TokenType::FRIEND, "FRIEND" },
	{ TokenType::GOTO, "GOTO" },*/
	{ TokenType::IF, "IF" },
	{ TokenType::INT, "INT" },
	/*{ TokenType::BITS_INT, "BITS_INT" },
	{ TokenType::INTERNAL, "INTERNAL" },
	{ TokenType::LONG, "LONG" },
	{ TokenType::NAMESPACE, "NAMESPACE" },
	{ TokenType::OPERATOR, "IDENTIFIER" },
	{ TokenType::PRIVATE, "PRIVATE" },
	{ TokenType::PUBLIC, "PUBLIC" },
	{ TokenType::PROTECTED, "PROTECTED" },
	{ TokenType::REGISTER, "REGISTER" },*/
	{ TokenType::RETURN, "RETURN" },
	/*{ TokenType::SHORT, "SHORT" },
	{ TokenType::SIGNED, "SIGNED" },
	{ TokenType::SIZEOF, "SIZEOF" },
	{ TokenType::STATIC, "STATIC" },
	{ TokenType::STRUCT, "STRUCT" },
	{ TokenType::SWITCH, "SWITCH" },
	{ TokenType::TYPEDEF, "TYPEDEF" },
	{ TokenType::THROW, "THROW" },
	{ TokenType::TRUE, "TRUE" },
	{ TokenType::TRY, "TRY" },
	{ TokenType::UNION, "UNION" },
	{ TokenType::UNSIGNED, "UNSIGNED" },
	{ TokenType::USING, "USING" },*/
	{ TokenType::VOID, "VOID" },
	//{ TokenType::VOLATILE, "VOLATILE" },
	{ TokenType::WHILE, "WHILE" },
	{ TokenType::SEMICOLON, "SEMICOLON" },
	{ TokenType::COMMA, "COMMA" },
	{ TokenType::CURLY_BRACKET_L, "BRACE_L" },
	{ TokenType::CURLY_BRACKET_R, "BRACE_R" },
	//{ TokenType::COLON, "COLON" },
	{ TokenType::BRACKET_L, "PARENTHESIS_L" },
	{ TokenType::BRACKET_R, "PARENTHESIS_R" },
	{ TokenType::SQUARE_BRACKET_L, "SQUARE_BRACKET_L" },
	{ TokenType::SQUARE_BRACKET_R, "SQUARE_BRACKET_R" },
	{ TokenType::TILDE, "TILDE" },
	/*{ TokenType::TERNARY_IF, "TERNARY_IF" },
	{ TokenType::ELLIPSIS, "ELLIPSIS" },*/
	{ TokenType::PLUS, "PLUS" },
	{ TokenType::MINUS, "MINUS" },
	{ TokenType::STAR, "STAR" },
	{ TokenType::DIVIDE, "SLASH" },
	{ TokenType::MODULE, "PERCENT" },
	{ TokenType::DOT, "PERIOD" },
	{ TokenType::LESS, "LESS" },
	{ TokenType::GREATER, "GREATER" },
	{ TokenType::LESS_OR_EQUAL, "LE_OP" },
	{ TokenType::GREATER_OR_EQUAL, "GE_OP" },
	{ TokenType::EQUAL, "EQ_OP" },
	//{ TokenType::PIPE, "PIPE" },
	{ TokenType::ASSIGN, "ASSIGN_OP" },
	{ TokenType::LOGICAL_AND, "AND_OP" },
	{ TokenType::LOGICAL_OR, "OR_OP" },
	{ TokenType::AMPERSAND, "AMPERSAND" },
	{ TokenType::OR, "OR" },
	{ TokenType::XOR, "XOR" },
	//{ TokenType::NOT, "NOT" },
	{ TokenType::NOT_EQUAL, "NE_OP" },
	/*{ TokenType::PTR, "PTR" },
	{ TokenType::INC, "INC_OP" },
	{ TokenType::DEC, "DEC_OP" },
	*/{ TokenType::LEFT_SHIFT, "LEFT_OP" },
	{ TokenType::RIGHT_SHIFT, "RIGHT_OP" },
	/*{ TokenType::ADD_ASSIGN, "ADD_ASSIGN" },
	{ TokenType::SUB_ASSIGN, "SUB_ASSIGN" },
	{ TokenType::MUL_ASSIGN, "MUL_ASSIGN" },
	{ TokenType::DIV_ASSIGN, "DIV_ASSIGN" },
	{ TokenType::MOD_ASSIGN, "MOD_ASSIGN" },
	{ TokenType::AND_ASSIGN, "AND_ASSIGN" },
	{ TokenType::OR_ASSIGN, "OR_ASSIGN" },
	{ TokenType::XOR_ASSIGN, "XOR_ASSIGN" },
	{ TokenType::LEFT_SHIFT_ASSIGN, "LEFT_ASSIGN" },
	{ TokenType::RIGHT_SHIFT_ASSIGN, "RIGHT_ASSIGN" },*/
	{ TokenType::ERROR, "ERROR" },
	{ TokenType::IDENTIFIER, "IDENTIFIER" },
	{ TokenType::INTEGER_DEC_NUMBER, "CONST_INTEGER" },
	//{ TokenType::INTEGER_OCT_NUMBER, "CONST_INTEGER_OCT" },
	//{ TokenType::INTEGER_HEX_NUMBER, "CONST_INTEGER_HEX" },
	{ TokenType::FLOAT_NUMBER, "CONST_FLOAT" },
	{ TokenType::CHARACTER, "CONST_CHARACTER" },
	{ TokenType::STRING, "CONST_STRING" }
};
