1 void VOID
1 main IDENTIFIER
1 ( PARENTHESIS_L
1 ) PARENTHESIS_R
2 { BRACE_L
3 int INT
3 size IDENTIFIER
3 = ASSIGN_OP
3 5 CONST_INTEGER
3 ; SEMICOLON
4 int INT
4 a IDENTIFIER
4 [ SQUARE_BRACKET_L
4 size IDENTIFIER
4 ] SQUARE_BRACKET_R
4 ; SEMICOLON
5 for FOR
5 ( PARENTHESIS_L
5 int INT
5 i IDENTIFIER
5 = ASSIGN_OP
5 0 CONST_INTEGER
5 ; SEMICOLON
5 i IDENTIFIER
5 < LESS
5 size IDENTIFIER
5 ; SEMICOLON
5 i IDENTIFIER
5 = ASSIGN_OP
5 i IDENTIFIER
5 + PLUS
5 1 CONST_INTEGER
5 ) PARENTHESIS_R
6 { BRACE_L
7 cin CIN
7 >> RIGHT_OP
7 a IDENTIFIER
7 [ SQUARE_BRACKET_L
7 i IDENTIFIER
7 ] SQUARE_BRACKET_R
7 ; SEMICOLON
8 } BRACE_R
10 for FOR
10 ( PARENTHESIS_L
10 int INT
10 i IDENTIFIER
10 = ASSIGN_OP
10 0 CONST_INTEGER
10 ; SEMICOLON
10 i IDENTIFIER
10 < LESS
10 size IDENTIFIER
10 ; SEMICOLON
10 i IDENTIFIER
10 = ASSIGN_OP
10 i IDENTIFIER
10 + PLUS
10 1 CONST_INTEGER
10 ) PARENTHESIS_R
11 { BRACE_L
12 for FOR
12 ( PARENTHESIS_L
12 int INT
12 j IDENTIFIER
12 = ASSIGN_OP
12 i IDENTIFIER
12 + PLUS
12 1 CONST_INTEGER
12 ; SEMICOLON
12 j IDENTIFIER
12 < LESS
12 size IDENTIFIER
12 ; SEMICOLON
12 j IDENTIFIER
12 = ASSIGN_OP
12 j IDENTIFIER
12 + PLUS
12 1 CONST_INTEGER
12 ) PARENTHESIS_R
13 { BRACE_L
14 if IF
14 ( PARENTHESIS_L
14 a IDENTIFIER
14 [ SQUARE_BRACKET_L
14 i IDENTIFIER
14 ] SQUARE_BRACKET_R
14 > GREATER
14 a IDENTIFIER
14 [ SQUARE_BRACKET_L
14 j IDENTIFIER
14 ] SQUARE_BRACKET_R
14 ) PARENTHESIS_R
15 { BRACE_L
16 int INT
16 t IDENTIFIER
16 = ASSIGN_OP
16 a IDENTIFIER
16 [ SQUARE_BRACKET_L
16 i IDENTIFIER
16 ] SQUARE_BRACKET_R
16 ; SEMICOLON
17 a IDENTIFIER
17 [ SQUARE_BRACKET_L
17 i IDENTIFIER
17 ] SQUARE_BRACKET_R
17 = ASSIGN_OP
17 a IDENTIFIER
17 [ SQUARE_BRACKET_L
17 j IDENTIFIER
17 ] SQUARE_BRACKET_R
17 ; SEMICOLON
18 a IDENTIFIER
18 [ SQUARE_BRACKET_L
18 j IDENTIFIER
18 ] SQUARE_BRACKET_R
18 = ASSIGN_OP
18 t IDENTIFIER
18 ; SEMICOLON
19 } BRACE_R
20 } BRACE_R
21 } BRACE_R
23 for FOR
23 ( PARENTHESIS_L
23 int INT
23 i IDENTIFIER
23 = ASSIGN_OP
23 0 CONST_INTEGER
23 ; SEMICOLON
23 i IDENTIFIER
23 < LESS
23 size IDENTIFIER
23 ; SEMICOLON
23 i IDENTIFIER
23 = ASSIGN_OP
23 i IDENTIFIER
23 + PLUS
23 1 CONST_INTEGER
23 ) PARENTHESIS_R
24 { BRACE_L
25 cout COUT
25 << LEFT_OP
25 a IDENTIFIER
25 [ SQUARE_BRACKET_L
25 i IDENTIFIER
25 ] SQUARE_BRACKET_R
25 ; SEMICOLON
26 cout COUT
26 << LEFT_OP
26 " " CONST_STRING
26 ; SEMICOLON
27 } BRACE_R
28 } BRACE_R
