<<<<<<< HEAD
1 char CHAR
1 newFunction IDENTIFIER
1 ( PARENTHESIS_L
1 string STRING
1 s IDENTIFIER
1 , COMMA
1 char CHAR
1 t IDENTIFIER
1 ) PARENTHESIS_R
2 { BRACE_L
3 int INT
3 q IDENTIFIER
3 = ASSIGN_OP
3 2 CONST_INTEGER
3 + PLUS
3 3 CONST_INTEGER
3 * STAR
3 7 CONST_INTEGER
3 / SLASH
3 ( PARENTHESIS_L
3 8 CONST_INTEGER
3 % PERCENT
3 333 CONST_INTEGER
3 ) PARENTHESIS_R
3 ; SEMICOLON
4 int INT
4 p IDENTIFIER
4 = ASSIGN_OP
4 ( PARENTHESIS_L
4 1 CONST_INTEGER
4 + PLUS
4 q IDENTIFIER
4 [ SQUARE_BRACKET_L
4 2 CONST_INTEGER
4 ] SQUARE_BRACKET_R
4 [ SQUARE_BRACKET_L
4 3 CONST_INTEGER
4 ] SQUARE_BRACKET_R
4 ) PARENTHESIS_R
4 * STAR
4 4 CONST_INTEGER
4 + PLUS
4 w IDENTIFIER
4 [ SQUARE_BRACKET_L
4 a IDENTIFIER
4 + PLUS
4 b IDENTIFIER
4 [ SQUARE_BRACKET_L
4 t IDENTIFIER
4 ] SQUARE_BRACKET_R
4 * STAR
4 3 CONST_INTEGER
4 ] SQUARE_BRACKET_R
4 ; SEMICOLON
5 u IDENTIFIER
5 = ASSIGN_OP
5 f IDENTIFIER
5 ( PARENTHESIS_L
5 a IDENTIFIER
5 , COMMA
5 b IDENTIFIER
5 ) PARENTHESIS_R
5 ; SEMICOLON
6 if IF
6 ( PARENTHESIS_L
6 a IDENTIFIER
6 > GREATER
6 b IDENTIFIER
6 ) PARENTHESIS_R
7 { BRACE_L
8 } BRACE_R
9 for FOR
9 ( PARENTHESIS_L
9 int INT
9 i IDENTIFIER
9 = ASSIGN_OP
9 0 CONST_INTEGER
9 ; SEMICOLON
9 i IDENTIFIER
9 < LESS
9 4 CONST_INTEGER
9 ; SEMICOLON
9 i IDENTIFIER
9 = ASSIGN_OP
9 i IDENTIFIER
9 + PLUS
9 1 CONST_INTEGER
9 ) PARENTHESIS_R
10 { BRACE_L
11 } BRACE_R
13 if IF
13 ( PARENTHESIS_L
13 a IDENTIFIER
13 > GREATER
13 3 CONST_INTEGER
13 || OR_OP
13 b IDENTIFIER
13 <= LE_OP
13 'a' CONST_CHARACTER
13 && AND_OP
13 ( PARENTHESIS_L
13 b IDENTIFIER
13 > GREATER
13 5 CONST_INTEGER
13 && AND_OP
13 w IDENTIFIER
13 == EQ_OP
13 "fhhfhf" CONST_STRING
13 ) PARENTHESIS_R
13 ) PARENTHESIS_R
14 { BRACE_L
15 while WHILE
15 ( PARENTHESIS_L
15 o IDENTIFIER
15 != NE_OP
15 u IDENTIFIER
15 ) PARENTHESIS_R
16 { BRACE_L
17 } BRACE_R
19 for FOR
19 ( PARENTHESIS_L
19 int INT
19 i IDENTIFIER
19 = ASSIGN_OP
19 0 CONST_INTEGER
19 ; SEMICOLON
19 i IDENTIFIER
19 < LESS
19 4 CONST_INTEGER
19 ; SEMICOLON
19 i IDENTIFIER
19 = ASSIGN_OP
19 i IDENTIFIER
19 + PLUS
19 1 CONST_INTEGER
19 ) PARENTHESIS_R
20 { BRACE_L
21 } BRACE_R
22 } BRACE_R
24 while WHILE
24 ( PARENTHESIS_L
24 ! NOT
24 ( PARENTHESIS_L
24 a IDENTIFIER
24 >= GE_OP
24 b IDENTIFIER
24 ) PARENTHESIS_R
24 && AND_OP
24 ! NOT
24 ( PARENTHESIS_L
24 o IDENTIFIER
24 != NE_OP
24 b IDENTIFIER
24 + PLUS
24 3 CONST_INTEGER
24 - MINUS
24 m IDENTIFIER
24 [ SQUARE_BRACKET_L
24 3 CONST_INTEGER
24 ] SQUARE_BRACKET_R
24 [ SQUARE_BRACKET_L
24 2 CONST_INTEGER
24 ] SQUARE_BRACKET_R
24 ) PARENTHESIS_R
24 ) PARENTHESIS_R
25 { BRACE_L
26 } BRACE_R
27 return RETURN
27 'a' CONST_CHARACTER
27 ; SEMICOLON
28 } BRACE_R
30 void VOID
30 ae IDENTIFIER
30 ( PARENTHESIS_L
30 int INT
30 x IDENTIFIER
30 ) PARENTHESIS_R
31 { BRACE_L
32 int INT
32 p IDENTIFIER
32 = ASSIGN_OP
32 ( PARENTHESIS_L
32 q IDENTIFIER
32 ( PARENTHESIS_L
32 1 CONST_INTEGER
32 , COMMA
32 d IDENTIFIER
32 + PLUS
32 p IDENTIFIER
32 [ SQUARE_BRACKET_L
32 3 CONST_INTEGER
32 ] SQUARE_BRACKET_R
32 [ SQUARE_BRACKET_L
32 4 CONST_INTEGER
32 ] SQUARE_BRACKET_R
32 ) PARENTHESIS_R
32 ) PARENTHESIS_R
32 ; SEMICOLON
33 int INT
33 u IDENTIFIER
33 = ASSIGN_OP
33 ( PARENTHESIS_L
33 6 CONST_INTEGER
33 + PLUS
33 d2 IDENTIFIER
33 ( PARENTHESIS_L
33 3 CONST_INTEGER
33 ) PARENTHESIS_R
33 ) PARENTHESIS_R
33 ; SEMICOLON
35 } BRACE_R
37 string STRING
37 qqqq IDENTIFIER
37 ( PARENTHESIS_L
37 ) PARENTHESIS_R
38 { BRACE_L
39 cout COUT
39 << LEFT_OP
39 "fhjdjfd" CONST_STRING
39 ; SEMICOLON
40 cout COUT
40 << LEFT_OP
40 func IDENTIFIER
40 ( PARENTHESIS_L
40 ) PARENTHESIS_R
40 ; SEMICOLON
41 cout COUT
41 << LEFT_OP
41 a IDENTIFIER
41 [ SQUARE_BRACKET_L
41 2 CONST_INTEGER
41 + PLUS
41 func IDENTIFIER
41 ( PARENTHESIS_L
41 ) PARENTHESIS_R
41 ] SQUARE_BRACKET_R
41 ; SEMICOLON
42 cin CIN
42 >> RIGHT_OP
42 s IDENTIFIER
42 ; SEMICOLON
43 cin CIN
43 >> RIGHT_OP
43 m IDENTIFIER
43 [ SQUARE_BRACKET_L
43 0 CONST_INTEGER
43 ] SQUARE_BRACKET_R
43 [ SQUARE_BRACKET_L
43 0 CONST_INTEGER
43 ] SQUARE_BRACKET_R
43 ; SEMICOLON
44 cin CIN
44 >> RIGHT_OP
44 non_func IDENTIFIER
44 ; SEMICOLON
46 return RETURN
46 "ssss" CONST_STRING
46 ; SEMICOLON
47 } BRACE_R
49 int INT
49 main IDENTIFIER
49 ( PARENTHESIS_L
49 int INT
49 a IDENTIFIER
49 , COMMA
49 string STRING
49 b IDENTIFIER
49 , COMMA
49 char CHAR
49 c IDENTIFIER
49 ) PARENTHESIS_R
50 { BRACE_L
51 a IDENTIFIER
51 [ SQUARE_BRACKET_L
51 34 CONST_INTEGER
51 ] SQUARE_BRACKET_R
51 = ASSIGN_OP
51 4 CONST_INTEGER
51 ; SEMICOLON
52 int INT
52 q IDENTIFIER
52 = ASSIGN_OP
52 4 CONST_INTEGER
52 ; SEMICOLON
54 q IDENTIFIER
54 = ASSIGN_OP
54 12354 CONST_INTEGER
54 ; SEMICOLON
57 int INT
57 wrnjnf IDENTIFIER
57 = ASSIGN_OP
57 14 CONST_INTEGER
57 ; SEMICOLON
58 string STRING
58 s IDENTIFIER
58 = ASSIGN_OP
58 3 CONST_INTEGER
58 ; SEMICOLON
59 int INT
59 a IDENTIFIER
59 = ASSIGN_OP
59 ( PARENTHESIS_L
59 f IDENTIFIER
59 - MINUS
59 - MINUS
59 d IDENTIFIER
59 * STAR
59 ( PARENTHESIS_L
59 9 CONST_INTEGER
59 + PLUS
59 6 CONST_INTEGER
59 ) PARENTHESIS_R
59 - MINUS
59 ( PARENTHESIS_L
59 4 CONST_INTEGER
59 + PLUS
59 1512 CONST_INTEGER
59 - MINUS
59 ( PARENTHESIS_L
59 e IDENTIFIER
59 / SLASH
59 9 CONST_INTEGER
59 ) PARENTHESIS_R
59 * STAR
59 d IDENTIFIER
59 ) PARENTHESIS_R
59 ) PARENTHESIS_R
59 ; SEMICOLON
60 map MAP
60 < LESS
60 string STRING
60 , COMMA
60 int INT
60 > GREATER
60 abba IDENTIFIER
60 ; SEMICOLON
62 return RETURN
62 0 CONST_INTEGER
62 ; SEMICOLON
63 } BRACE_R
=======
1 a IDENTIFIER
1 [ SQUARE_BRACKET_L
1 -2 CONST_INTEGER
1 ] SQUARE_BRACKET_R
>>>>>>> origin/master
