1 void VOID
1 main IDENTIFIER
1 ( PARENTHESIS_L
1 ) PARENTHESIS_R
2 { BRACE_L
3 float FLOAT
3 a IDENTIFIER
3 [ SQUARE_BRACKET_L
3 2 CONST_INTEGER
3 ] SQUARE_BRACKET_R
3 [ SQUARE_BRACKET_L
3 2 CONST_INTEGER
3 ] SQUARE_BRACKET_R
3 ; SEMICOLON
4 float FLOAT
4 b IDENTIFIER
4 [ SQUARE_BRACKET_L
4 2 CONST_INTEGER
4 ] SQUARE_BRACKET_R
4 [ SQUARE_BRACKET_L
4 2 CONST_INTEGER
4 ] SQUARE_BRACKET_R
4 ; SEMICOLON
5 float FLOAT
5 result IDENTIFIER
5 [ SQUARE_BRACKET_L
5 2 CONST_INTEGER
5 ] SQUARE_BRACKET_R
5 [ SQUARE_BRACKET_L
5 2 CONST_INTEGER
5 ] SQUARE_BRACKET_R
5 ; SEMICOLON
6 for FOR
6 ( PARENTHESIS_L
6 int INT
6 i IDENTIFIER
6 = ASSIGN_OP
6 0 CONST_INTEGER
6 ; SEMICOLON
6 i IDENTIFIER
6 < LESS
6 2 CONST_INTEGER
6 ; SEMICOLON
6 i IDENTIFIER
6 = ASSIGN_OP
6 i IDENTIFIER
6 + PLUS
6 1 CONST_INTEGER
6 ) PARENTHESIS_R
7 { BRACE_L
8 for FOR
8 ( PARENTHESIS_L
8 int INT
8 j IDENTIFIER
8 = ASSIGN_OP
8 0 CONST_INTEGER
8 ; SEMICOLON
8 j IDENTIFIER
8 < LESS
8 2 CONST_INTEGER
8 ; SEMICOLON
8 j IDENTIFIER
8 = ASSIGN_OP
8 j IDENTIFIER
8 + PLUS
8 1 CONST_INTEGER
8 ) PARENTHESIS_R
9 { BRACE_L
10 cin CIN
10 >> RIGHT_OP
10 a IDENTIFIER
10 [ SQUARE_BRACKET_L
10 i IDENTIFIER
10 ] SQUARE_BRACKET_R
10 [ SQUARE_BRACKET_L
10 j IDENTIFIER
10 ] SQUARE_BRACKET_R
10 ; SEMICOLON
11 } BRACE_R
12 } BRACE_R
14 for FOR
14 ( PARENTHESIS_L
14 int INT
14 i IDENTIFIER
14 = ASSIGN_OP
14 0 CONST_INTEGER
14 ; SEMICOLON
14 i IDENTIFIER
14 < LESS
14 2 CONST_INTEGER
14 ; SEMICOLON
14 i IDENTIFIER
14 = ASSIGN_OP
14 i IDENTIFIER
14 + PLUS
14 1 CONST_INTEGER
14 ) PARENTHESIS_R
15 { BRACE_L
16 for FOR
16 ( PARENTHESIS_L
16 int INT
16 j IDENTIFIER
16 = ASSIGN_OP
16 0 CONST_INTEGER
16 ; SEMICOLON
16 j IDENTIFIER
16 < LESS
16 2 CONST_INTEGER
16 ; SEMICOLON
16 j IDENTIFIER
16 = ASSIGN_OP
16 j IDENTIFIER
16 + PLUS
16 1 CONST_INTEGER
16 ) PARENTHESIS_R
17 { BRACE_L
18 cin CIN
18 >> RIGHT_OP
18 b IDENTIFIER
18 [ SQUARE_BRACKET_L
18 i IDENTIFIER
18 ] SQUARE_BRACKET_R
18 [ SQUARE_BRACKET_L
18 j IDENTIFIER
18 ] SQUARE_BRACKET_R
18 ; SEMICOLON
19 } BRACE_R
20 } BRACE_R
22 for FOR
22 ( PARENTHESIS_L
22 int INT
22 i IDENTIFIER
22 = ASSIGN_OP
22 0 CONST_INTEGER
22 ; SEMICOLON
22 i IDENTIFIER
22 < LESS
22 2 CONST_INTEGER
22 ; SEMICOLON
22 i IDENTIFIER
22 = ASSIGN_OP
22 i IDENTIFIER
22 + PLUS
22 1 CONST_INTEGER
22 ) PARENTHESIS_R
23 { BRACE_L
24 for FOR
24 ( PARENTHESIS_L
24 int INT
24 j IDENTIFIER
24 = ASSIGN_OP
24 0 CONST_INTEGER
24 ; SEMICOLON
24 j IDENTIFIER
24 < LESS
24 2 CONST_INTEGER
24 ; SEMICOLON
24 j IDENTIFIER
24 = ASSIGN_OP
24 j IDENTIFIER
24 + PLUS
24 1 CONST_INTEGER
24 ) PARENTHESIS_R
25 { BRACE_L
26 float FLOAT
26 res IDENTIFIER
26 = ASSIGN_OP
26 0 CONST_INTEGER
26 ; SEMICOLON
27 for FOR
27 ( PARENTHESIS_L
27 int INT
27 p IDENTIFIER
27 = ASSIGN_OP
27 0 CONST_INTEGER
27 ; SEMICOLON
27 p IDENTIFIER
27 < LESS
27 2 CONST_INTEGER
27 ; SEMICOLON
27 p IDENTIFIER
27 = ASSIGN_OP
27 p IDENTIFIER
27 + PLUS
27 1 CONST_INTEGER
27 ) PARENTHESIS_R
28 { BRACE_L
29 res IDENTIFIER
29 = ASSIGN_OP
29 res IDENTIFIER
29 + PLUS
29 a IDENTIFIER
29 [ SQUARE_BRACKET_L
29 i IDENTIFIER
29 ] SQUARE_BRACKET_R
29 [ SQUARE_BRACKET_L
29 p IDENTIFIER
29 ] SQUARE_BRACKET_R
29 * STAR
29 a IDENTIFIER
29 [ SQUARE_BRACKET_L
29 p IDENTIFIER
29 ] SQUARE_BRACKET_R
29 [ SQUARE_BRACKET_L
29 j IDENTIFIER
29 ] SQUARE_BRACKET_R
29 ; SEMICOLON
30 } BRACE_R
31 result IDENTIFIER
31 [ SQUARE_BRACKET_L
31 i IDENTIFIER
31 ] SQUARE_BRACKET_R
31 [ SQUARE_BRACKET_L
31 j IDENTIFIER
31 ] SQUARE_BRACKET_R
31 = ASSIGN_OP
31 res IDENTIFIER
31 ; SEMICOLON
32 } BRACE_R
33 } BRACE_R
35 for FOR
35 ( PARENTHESIS_L
35 int INT
35 i IDENTIFIER
35 = ASSIGN_OP
35 0 CONST_INTEGER
35 ; SEMICOLON
35 i IDENTIFIER
35 < LESS
35 2 CONST_INTEGER
35 ; SEMICOLON
35 i IDENTIFIER
35 = ASSIGN_OP
35 i IDENTIFIER
35 + PLUS
35 1 CONST_INTEGER
35 ) PARENTHESIS_R
36 { BRACE_L
37 for FOR
37 ( PARENTHESIS_L
37 int INT
37 j IDENTIFIER
37 = ASSIGN_OP
37 0 CONST_INTEGER
37 ; SEMICOLON
37 j IDENTIFIER
37 < LESS
37 2 CONST_INTEGER
37 ; SEMICOLON
37 j IDENTIFIER
37 = ASSIGN_OP
37 j IDENTIFIER
37 + PLUS
37 1 CONST_INTEGER
37 ) PARENTHESIS_R
38 { BRACE_L
39 cout COUT
39 << LEFT_OP
39 res IDENTIFIER
39 [ SQUARE_BRACKET_L
39 i IDENTIFIER
39 ] SQUARE_BRACKET_R
39 [ SQUARE_BRACKET_L
39 j IDENTIFIER
39 ] SQUARE_BRACKET_R
39 ; SEMICOLON
40 } BRACE_R
41 cout COUT
41 << LEFT_OP
41 '\n' CONST_CHARACTER
41 ; SEMICOLON
42 } BRACE_R
43 } BRACE_R
