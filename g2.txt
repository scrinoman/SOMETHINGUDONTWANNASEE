<code> -> <func> <other_code>
<other_code> -> $ | <code>
<func> -> <return_type> <idFunc> ( <idlist> ) { <explist> }
<return_type> -> <var_type> | void
<var_type> -> int | string | char | float
<id_decl> -> <var_type> <id>
<idlist> -> <id_decl> <other_decl> | $
<other_decl> -> , <id_decl> <other_decl> | $
<explist> -> <expression> <explist> | $
<expression> -> <decl_action> | <op_action> | <IO_call> | <cycle> | <condition> | <return_call>
<decl_action> -> <decl_left> <decl_right> ;
<decl_left> -> <var_decl> | <map_decl>
<var_decl> -> <var_type> <id>
<map_decl> -> map '<' <var_type> '>' <id>
<decl_right> -> = <right_part> | $
<right_part> -> <all_left_parts> <rp>
<rp> -> <bin_op> <all_left_parts> <rp> | $
<all_left_parts> -> <const> | <complex_part>
<complex_part> -> <start> <main_part>
<start> -> $ | -
<main_part> -> ( <right_part> ) | <left_part>
<op_action> -> <left_part_wo_functions> = <right_part> ;
<IO_call> -> cin >> <left_part_wo_functions> ; | cout << <right_part> ;
<left_part_wo_functions> -> <id> <next_left_part_wo_fuctions>
<next_left_part_wo_fuctions> -> <array_decl> | $
<left_part> -> <left_part_wo_functions> | <idFunc> <func_part>
<func_part> -> ( <func_list> )
<func_list> -> $ | <left_part> <other_func_list>
<other_func_list> -> $ | , <left_part> <other_func_list>
<array_decl> -> [ <right_part> ]
<bin_op> -> + | - | * | / | & | '|' | ^
<return_call> -> return <right_part> ;
<cycle> -> while ( <cond_expr> ) { <explist> } | for ( <var_decl> = <right_part> ; <cond_expr> ; <id> = <right_part> ) { <explist> }
<cond_op> -> == | != | < | > | >= | <= | && | '||'
<condition> -> if ( <cond_expr> ) { <explist> } <else>
<else> -> $ | else { <explist> }
<cond_expr> -> <cond_part> <ravage>
<ravage> -> <cond_op> <cond_part> <ravage> | $
<cond_part> -> <right_part> | ! <cond_expr> (; изменения тут <-;)
<const> -> <const_int> | <const_string> | <const_float> | <const_char>